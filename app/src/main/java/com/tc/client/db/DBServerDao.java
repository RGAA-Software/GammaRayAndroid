package com.tc.client.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBSERVER".
*/
public class DBServerDao extends AbstractDao<DBServer, Long> {

    public static final String TABLENAME = "DBSERVER";

    /**
     * Properties of entity DBServer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "SERVER_ID");
        public final static Property IconIndex = new Property(2, int.class, "iconIndex", false, "ICON_INDEX");
        public final static Property ServerName = new Property(3, String.class, "serverName", false, "SERVER_NAME");
        public final static Property ServerIp = new Property(4, String.class, "serverIp", false, "SERVER_IP");
        public final static Property ServerVersion = new Property(5, String.class, "serverVersion", false, "SERVER_VERSION");
        public final static Property HttpServerPort = new Property(6, int.class, "httpServerPort", false, "HTTP_SERVER_PORT");
        public final static Property WsServerPort = new Property(7, int.class, "wsServerPort", false, "WS_SERVER_PORT");
        public final static Property UdpCastServerPort = new Property(8, int.class, "udpCastServerPort", false, "UDP_CAST_SERVER_PORT");
        public final static Property StreamWsPort = new Property(9, int.class, "streamWsPort", false, "STREAM_WS_PORT");
        public final static Property CoverUrl = new Property(10, String.class, "coverUrl", false, "COVER_URL");
        public final static Property DeviceId = new Property(11, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property StreamId = new Property(12, String.class, "streamId", false, "STREAM_ID");
    }


    public DBServerDao(DaoConfig config) {
        super(config);
    }
    
    public DBServerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBSERVER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVER_ID\" TEXT UNIQUE ," + // 1: serverId
                "\"ICON_INDEX\" INTEGER NOT NULL ," + // 2: iconIndex
                "\"SERVER_NAME\" TEXT," + // 3: serverName
                "\"SERVER_IP\" TEXT," + // 4: serverIp
                "\"SERVER_VERSION\" TEXT," + // 5: serverVersion
                "\"HTTP_SERVER_PORT\" INTEGER NOT NULL ," + // 6: httpServerPort
                "\"WS_SERVER_PORT\" INTEGER NOT NULL ," + // 7: wsServerPort
                "\"UDP_CAST_SERVER_PORT\" INTEGER NOT NULL ," + // 8: udpCastServerPort
                "\"STREAM_WS_PORT\" INTEGER NOT NULL ," + // 9: streamWsPort
                "\"COVER_URL\" TEXT," + // 10: coverUrl
                "\"DEVICE_ID\" TEXT," + // 11: deviceId
                "\"STREAM_ID\" TEXT);"); // 12: streamId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBSERVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBServer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
        stmt.bindLong(3, entity.getIconIndex());
 
        String serverName = entity.getServerName();
        if (serverName != null) {
            stmt.bindString(4, serverName);
        }
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(5, serverIp);
        }
 
        String serverVersion = entity.getServerVersion();
        if (serverVersion != null) {
            stmt.bindString(6, serverVersion);
        }
        stmt.bindLong(7, entity.getHttpServerPort());
        stmt.bindLong(8, entity.getWsServerPort());
        stmt.bindLong(9, entity.getUdpCastServerPort());
        stmt.bindLong(10, entity.getStreamWsPort());
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(11, coverUrl);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
 
        String streamId = entity.getStreamId();
        if (streamId != null) {
            stmt.bindString(13, streamId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBServer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
        stmt.bindLong(3, entity.getIconIndex());
 
        String serverName = entity.getServerName();
        if (serverName != null) {
            stmt.bindString(4, serverName);
        }
 
        String serverIp = entity.getServerIp();
        if (serverIp != null) {
            stmt.bindString(5, serverIp);
        }
 
        String serverVersion = entity.getServerVersion();
        if (serverVersion != null) {
            stmt.bindString(6, serverVersion);
        }
        stmt.bindLong(7, entity.getHttpServerPort());
        stmt.bindLong(8, entity.getWsServerPort());
        stmt.bindLong(9, entity.getUdpCastServerPort());
        stmt.bindLong(10, entity.getStreamWsPort());
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(11, coverUrl);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(12, deviceId);
        }
 
        String streamId = entity.getStreamId();
        if (streamId != null) {
            stmt.bindString(13, streamId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBServer readEntity(Cursor cursor, int offset) {
        DBServer entity = new DBServer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.getInt(offset + 2), // iconIndex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serverName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serverIp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serverVersion
            cursor.getInt(offset + 6), // httpServerPort
            cursor.getInt(offset + 7), // wsServerPort
            cursor.getInt(offset + 8), // udpCastServerPort
            cursor.getInt(offset + 9), // streamWsPort
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // coverUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deviceId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // streamId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBServer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconIndex(cursor.getInt(offset + 2));
        entity.setServerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setServerIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServerVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHttpServerPort(cursor.getInt(offset + 6));
        entity.setWsServerPort(cursor.getInt(offset + 7));
        entity.setUdpCastServerPort(cursor.getInt(offset + 8));
        entity.setStreamWsPort(cursor.getInt(offset + 9));
        entity.setCoverUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeviceId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStreamId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBServer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBServer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBServer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
